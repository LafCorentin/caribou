10:37:35,391 INFO  [stdout] (default task-146) ***************************************************
10:37:35,392 INFO  [stdout] (default task-146) FR
10:37:35,392 INFO  [stdout] (default task-146) ***************************************************
10:37:35,545 INFO  [stdout] (default task-146) AXA-EIP_1310_FISCAL_OPT----------------------------- reserveAtTerm after Tax: 56869.66338327483
10:37:35,760 INFO  [stdout] (default task-146) AXA-EIP_1310_FISCAL_OPT----------------------------- reserveAtTerm after Tax: 56870.86012891239
10:37:35,870 INFO  [stdout] (default task-146) AXA-EIP_1310_FISCAL_OPT----------------------------- reserveAtTerm after Tax: 61295.786828610144
10:37:35,980 INFO  [stdout] (default task-146) AXA-EIP_1310_FISCAL_OPT----------------------------- reserveAtTerm after Tax: 61293.904001113
10:37:35,982 INFO  [org.apache.cxf.interceptor.LoggingOutInterceptor] (default task-146) Outbound Message
---------------------------
ID: 1025
Response-Code: 200
Content-Type: application/json
Headers: {Content-Type=[application/json], Date=[Mon, 11 Jun 2018 08:37:35 GMT]}
Payload: 50084.71738381462
--------------------------------------
10:37:36,068 INFO  [org.apache.cxf.interceptor.LoggingInInterceptor] (default task-144) Inbound Message
----------------------------
ID: 1026
Address: http://SALES-FLOW:18080/SalesFlow/services/rest/projection/goalseek
Encoding: ISO-8859-1
Http-Method: POST
Content-Type: application/json
Headers: {Accept=[application/json], Authorization=[Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJPMy15R25uN1IweVQzYjNxTkZUR2FIYVFtVWV0NXZRWUJnS1RsTmRnRnd3In0.eyJqdGkiOiJjOGQ3MmExNC01MjE1LTQ3NDctODUxOC1kMWJhY2YyZDNiMzgiLCJleHAiOjE1Mjg3MDY1NTQsIm5iZiI6MCwiaWF0IjoxNTI4NzA2MjU0LCJpc3MiOiJodHRwOi8vU0VDVVJJVFk6OTA4MC9hdXRoL3JlYWxtcy9SZWFsbUFYQSIsImF1ZCI6InB1YmxpYy1jbGllbnQiLCJzdWIiOiI0YTkzNWJjYi0yOGZiLTQwZTUtYjFlYi01ZjQ1YjM4YWJhN2MiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJwdWJsaWMtY2xpZW50IiwiYXV0aF90aW1lIjowLCJzZXNzaW9uX3N0YXRlIjoiOTNmODhmMTMtYTkzYy00OWI1LThjZjktMGNkNjExMDk2ZGM0IiwiYWNyIjoiMSIsImNsaWVudF9zZXNzaW9uIjoiNDYwNmY5ZjAtOGNmMC00ZWFjLTg0ZGQtOTEwN2ViYjg3NmI2IiwiYWxsb3dlZC1vcmlnaW5zIjpbXSwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIk1pZC1PZmZpY2VyIiwiYWRtaW4iLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJ2aWV3LXByb2ZpbGUiXX19LCJyb2xlcyI6WyJNaWQtT2ZmaWNlciIsIm9mZmxpbmVfYWNjZXNzIiwiYWRtaW4iLCJ1bWFfYXV0aG9yaXphdGlvbiJdLCJuYW1lIjoiIiwiZ3JvdXBzIjpbXSwicHJlZmVycmVkX3VzZXJuYW1lIjoiYnJva2VyMSJ9.xVvJBrQl_GIY3yeYXlihgbWMXEcggGfAWrvt8Hih2xv-FY_WLSsBjZP3Bhd-mkI9bP0Tb1DwK1nPjHo8XyAY0uEM1ChEos4cydGNPuaT0xPByEuy-8DCUWNmsYUH9rlMWU9a4ADl2M2ormCFfKY8fS03PatDDzlaaNMqx5igWDJi3r1C2mq2J0F1czPaV6pUalNxA5HaTIiTLj3-7-rbv3RqvTRkeTZv525SGv005MK5iuXfOTckLUcLfTqNII6QyL0_ZHf2dI4DLDvCEXTOHXysiOZDPiP6c3XoX-QTcBSlSDBd7stkbM7dHVYqHs3NCXphy2MwNUXPnXH9SffnsA], Cache-Control=[no-cache], connection=[keep-alive], content-type=[application/json], correlationId=[125dbfdc-49ba-4cd5-9844-6c919c9ba488], Host=[SALES-FLOW:18080], Pragma=[no-cache], transfer-encoding=[chunked], User-Agent=[Apache-CXF/3.1.7], User-Profile=[FR]}
Payload: {
  "type" : "com.vermeg.projection.api.goalseek.input.ProjectionGoalSeekInput",
  "errorMax" : 1.0,
  "secondHypothesis" : 7916.066405837139,
  "targetResult" : 267409.66000000003,
  "computationPurpose" : "regularPremium",
  "firstHypothesis" : 7915.066405837139,
  "projectionInput" : {
    "type" : "com.vermeg.projection.api.input.ProjectionInput",
    "simulationInput" : {
      "type" : "com.vermeg.projection.api.input.SimulationInput",
      "proratedRegPremAtEnd" : false,
      "startDate" : "06/11/2018T00:00:00.000+0200",
      "capitalAmount" : 0.0,
      "indexationRate" : 0.0,
      "proratedRegularPremiumAmountAtBegin" : 6623.05,
      "proratedRegPremAtBegin" : false,
      "smoker" : false,
      "regularPremium" : 267409.66000000003,
      "endDate" : "01/31/2047T00:00:00.000+0100",
      "proratedRegularPremiumAmountAtEnd" : 0.0,
      "uniquePremium" : 50084.72,
      "yearlyPremiumPaidMonthly" : false,
      "insuredAmount" : [ {
        "type" : "com.vermeg.projection.api.input.Amount",
        "amount" : 100000.0,
        "amountType" : "RSK_DEATH_INV_COMPLEMENT_AXA"
      } ],
      "initialReserves" : [ {
        "type" : "com.vermeg.projection.api.input.Amount",
        "amount" : 1000.0,
        "amountType" : "MAIN"
      }, {
        "type" : "com.vermeg.projection.api.input.Amount",
        "amount" : 0.0,
        "amountType" : "PS"
      } ],
      "strategyRate" : [ {
        "type" : "com.vermeg.projection.api.input.StrategyRate",
        "rate" : 0.01,
        "reserveType" : "total"
      }, {
        "type" : "com.vermeg.projection.api.input.StrategyRate",
        "rate" : 0.01,
        "reserveType" : "main"
      }, {
        "type" : "com.vermeg.projection.api.input.StrategyRate",
        "rate" : 0.0,
        "reserveType" : "ps"
      } ]
    },
    "projectionCalculationRule" : [ {
      "type" : "com.vermeg.projection.api.input.ProjectionCalculationRule",
      "projectionInput$order" : 0,
      "expression" : "function yearFrac(sdate, edate){\n    // Lookup years, months, and days\n    var syear = sdate.getYear();\n    var smonth = sdate.getMonth();\n    var sday = sdate.getDate();\n    var eyear = edate.getYear();\n    var emonth = edate.getMonth();\n    var eday = edate.getDate();\n\n    var sdaysInMonth = daysInMonth(syear, smonth, sday);\n    var edaysInMonth = daysInMonth(eyear, emonth, eday);\n\n    if (sday === 31 && eday === 31) {\n        sday = 30;\n        eday = 30;\n    } else if (sday === 31) {\n        sday = 30;\n    } else if (sday === 30 && eday === 31) {\n        eday = 30;\n    } else if (smonth === 1 && emonth === 1 && sdaysInMonth === sday && edaysInMonth === eday) {\n        sday = 30;\n        eday = 30;\n    } else if (smonth === 1 && sdaysInMonth === sday) {\n\n        sday = 30;\n    }\n\n    return ((eday + emonth * 30 + eyear * 360) - (sday + smonth * 30 + syear * 360)) / 360;\n\n}\n\nfunction daysInMonth(year, month, day) {\n    var mycal = new java.util.GregorianCalendar(year, month, day);\n\n    // Get the number of days in that month\n    var daysInMonth = mycal.getActualMaximum(java.util.Calendar.DAY_OF_MONTH);\n\n    return daysInMonth;\n}\n\n    return yearFrac;",
      "displayed" : true,
      "resultType" : "Other",
      "identifier" : "yearFrac",
      "ruleOrder" : 0
    }, {
      "type" : "com.vermeg.projection.api.input.ProjectionCalculationRule",
      "projectionInput$order" : 1,
      "expression" : "return simulationDate.equals(input.simulationInput.endDate);",
      "displayed" : false,
      "resultType" : "Other",
      "identifier" : "isEndDate",
      "ruleOrder" : 1
    }, {
      "type" : "com.vermeg.projection.api.input.ProjectionCalculationRule",
      "projectionInput$order" : 2,
      "expression" : "var reserve = 0.0;\n\nif(i==0){\n\treserve =  input.simulationInput.initialReserves.get(\"MAIN\");\n} else {\n\treserve=vMainEndPeriod;\n}\n\n\nreturn reserve != null ? reserve : 0.0;",
      "displayed" : true,
      "resultType" : "BeginReserveMain",
      "identifier" : "vInitMain",
      "ruleOrder" : 2
    }, {
      "type" : "com.vermeg.projection.api.input.ProjectionCalculationRule",
      "projectionInput$order" : 3,
      "expression" : "if(i==0){\n\treserve =  input.simulationInput.initialReserves.get(\"PS\");\n} else {\n\treserve=vPSEndPeriod;\n}\n\nreturn reserve != null ? reserve : 0.0;",
      "displayed" : true,
      "resultType" : "BeginReservePs",
      "identifier" : "vInitPS",
      "ruleOrder" : 3
    }, {
      "type" : "com.vermeg.projection.api.input.ProjectionCalculationRule",
      "projectionInput$order" : 4,
      "expression" : "return vInitMain+vInitPS;",
      "displayed" : true,
      "resultType" : "BeginReserveTotal",
      "identifier" : "vInitTot",
      "ruleOrder" : 4
    }, {
      "type" : "com.vermeg.projection.api.input.ProjectionCalculationRule",
      "projectionInput$order" : 5,
      "expression" : "if (i==0) {\n\treturn input.simulationInput.uniquePremium;\n}\n\nreturn 0;",
      "displayed" : true,
      "resultType" : "UniquePremium",
      "identifier" : "uniquePremium",
      "ruleOrder" : 5
    }, {
      "type" : "com.vermeg.projection.api.input.ProjectionCalculationRule",
      "projectionInput$order" : 6,
      "expression" : "if(isEndDate) return 0.0;\nvar startDate =  input.simulationInput.startDate;\nvar endDate =  input.simulationInput.endDate;\n\nvar sdate = simulationDate;\n\nvar yp =0.0;\n\n// first iteration\nif (i==0 &&  input.simulationInput.regularPremium== 0) return 0;\nif(i==0){\nif(input.simulationInput.proratedRegPremAtbegin){\nif(input.simulationInput.proratedRegularPremiumAmountAtBegin !=null)\n\n{ return input.simulationInput.proratedRegularPremiumAmountAtBegin; }\n}\nreturn input.simulationInput.regularPremium;\n}\n\n// last iteration\nif(i >= endDate.getYear()-startDate.getYear()){\n\tvar ratio =1;\n\tif(input.simulationInput.proratedRegPremAtEnd){\t \n\t\tratio = yearFrac(simulationDate, endDate);\n\t}\n\n\treturn yearlyPremium*(1+input.simulationInput.indexationRate) * ratio;\n}\n\n// Second year should be indexed based on the not prorated regular premium\nif(i==1){\n\typ = input.simulationInput.regularPremium;\n} else {\n\typ = yearlyPremium;\n}\n\n// regular premium calculation\nreturn yp * (1+ input.simulationInput.indexationRate);",
      "displayed" : true,
      "resultType" : "RegularPremium",
      "identifier" : "yearlyPremium",
      "ruleOrder" : 6
    }, {
      "type" : "com.vermeg.projection.api.input.ProjectionCalculationRule",
      "projectionInput$order" : 7,
      "expression" : "var result = 0.0;\nvar taxType = \"APPLY_ON_UNIQUE_PREMIUM\";\n\nif(i != 0){\n\treturn 0;\n}\n\nvar taxInputs = input.packageInput.taxInputs\nfor (j = 0; j < taxInputs.size(); j++) {\n\tvar taxInput = taxInputs.get(j);\n\tif(taxInput.taxType == taxType){\n\t\tresult += +(uniquePremium*(1-1/(1+taxInput.rate))).toFixed(2)+taxInput.taxAmount;\n\t}\n}\n\nreturn result;",
      "displayed" : true,
      "resultType" : "Other",
      "identifier" : "taxesUniquePremium",
      "ruleOrder" : 7
    }, {
      "type" : "com.vermeg.projection.api.input.ProjectionCalculationRule",
      "projectionInput$order" : 8,
      "expression" : "var result = 0.0;\nvar chargeType = \"APPLY_ON_UNIQUE_PREMIUM\";\n\nif(i != 0){\n\treturn 0;\n}\n\nvar chargeInputs = input.packageInput.chargeInputs\nfor (j = 0; j < chargeInputs.size(); j++) {\n\tvar chargeInput = chargeInputs.get(j);\n\tif(chargeInput.chargeType == chargeType){\n\t\tresult += +((uniquePremium-taxesUniquePremium)*chargeInput.rate).toFixed(2)+chargeInput.feeAmount;\n\t\t\n\t}\n}\n\nreturn result;",
      "displayed" : true,
      "resultType" : "Other",
      "identifier" : "chargesUniquePremium",
      "ruleOrder" : 8
    }, {
      "type" : "com.vermeg.projection.api.input.ProjectionCalculationRule",
      "projectionInput$order" : 9,
      "expression" : "return 0.0;",
      "displayed" : true,
      "resultType" : "RiskFromPremium",
      "identifier" : "riskDeductedFromP",
      "ruleOrder" : 9
    }, {
      "type" : "com.vermeg.projection.api.input.ProjectionCalculationRule",
      "projectionInput$order" : 10,
      "expression" : "var result = 0.0;\nvar taxType = \"APPLY_ON_YEARLY_PREMIUM\";\n\n\nvar taxInputs = input.packageInput.taxInputs\nfor (j = 0; j < taxInputs.size(); j++) {\n\tvar taxInput = taxInputs.get(j);\n\tif(taxInput.taxType == taxType){\n\t\tresult += +(yearlyPremium*(1-1/(1+taxInput.rate))).toFixed(2)+taxInput.taxAmount;\n\t}\n}\n\nreturn result;",
      "displayed" : true,
      "resultType" : "Other",
      "identifier" : "taxesYearlyPremium",
      "ruleOrder" : 10
    }, {
      "type" : "com.vermeg.projection.api.input.ProjectionCalculationRule",
      "projectionInput$order" : 11,
      "expression" : "var result = 0.0;\nvar chargeType = \"APPLY_ON_YEARLY_PREMIUM\";\n\n\nvar chargeInputs = input.packageInput.chargeInputs\nfor (j = 0; j < chargeInputs.size(); j++) {\n\tvar chargeInput = chargeInputs.get(j);\n\tif(chargeInput.chargeType == chargeType){\n\t\tresult += +((yearlyPremium-taxesYearlyPremium-riskDeductedFromP)*chargeInput.rate).toFixed(2)+chargeInput.feeAmount;\n\t\t\n\t}\n}\n\nreturn result;",
      "displayed" : true,
      "resultType" : "Other",
      "identifier" : "chargesYearlyPremium",
      "ruleOrder" : 11
    }, {
      "type" : "com.vermeg.projection.api.input.ProjectionCalculationRule",
      "projectionInput$order" : 12,
      "expression" : "var result = 0.0;\nif(i == 0){\n\tresult = vInitTot+uniquePremium-taxesUniquePremium-chargesUniquePremium;\n\tif(!input.simulationInput.yearlyPremiumPaidMonthly){\n\t\tresult += yearlyPremium -taxesYearlyPremium - chargesYearlyPremium - riskDeductedFromP;\n\t}\n} else {\n\tresult = vInitTot;\n}\n\nreturn result;",
      "displayed" : true,
      "resultType" : "Other",
      "identifier" : "vTotBeginPeriodAfterP",
      "ruleOrder" : 12
    }, {
      "type" : "com.vermeg.projection.api.input.ProjectionCalculationRule",
      "projectionInput$order" : 13,
      "expression" : "if(isEndDate) return vInitMain;\nimportPackage(com.vermeg.salesflow.projection.code);\n\nvar strategyRate = input.simulationInput.getStrategyRate(ReserveType.MAIN) + 1;\n\nvar nextSimulationDate = new java.util.Date(simulationDate.getYear() + 1, 0, 1);\nif(nextSimulationDate.after(input.simulationInput.endDate)){\n    nextSimulationDate = input.simulationInput.endDate;\n}\n\nvar simulationYearDuration = yearFrac(simulationDate, nextSimulationDate);\n\nvar reserve = vInitMain + uniquePremium - taxesUniquePremium - chargesUniquePremium;\n\nvar result = reserve * Math.pow(strategyRate, simulationYearDuration);\n\nvar sDate = new java.util.Date(\n        input.simulationInput.startDate.getYear() + i,\n        input.simulationInput.startDate.getMonth(),\n        input.simulationInput.startDate.getDate()\n);\n\nif (input.simulationInput.yearlyPremiumPaidMonthly || sDate.after(nextSimulationDate)) {\n    reserve = yearlyPremium - taxesYearlyPremium - chargesYearlyPremium - riskDeductedFromP;\n    result += reserve * Math.pow(strategyRate, (0.5 * simulationYearDuration))\n} else {\n    reserve = yearlyPremium - taxesYearlyPremium - chargesYearlyPremium - riskDeductedFromP;\n\n    //var sDate = new java.util.Date(\n        //input.simulationInput.startDate.getYear() + i,\n        //input.simulationInput.startDate.getMonth(),\n        //input.simulationInput.startDate.getDate()\n    //);\n\n    var insuredYearDuration = yearFrac(sDate, nextSimulationDate);\n\n    result += reserve * Math.pow(strategyRate, insuredYearDuration);\n\n}\n\nreturn result;",
      "displayed" : true,
      "resultType" : "Other",
      "identifier" : "vMainEndPeriodBeforeRisk",
      "ruleOrder" : 13
    }, {
      "type" : "com.vermeg.projection.api.input.ProjectionCalculationRule",
      "projectionInput$order" : 14,
      "expression" : "if(isEndDate) return vInitPS;\nimportPackage(com.vermeg.salesflow.projection.code);\n\nvar strategyRate = input.simulationInput.getStrategyRate(ReserveType.MAIN) + 1;\n\nvar nextSimulationDate = new java.util.Date(simulationDate.getYear() + 1, 0, 1);\nif(nextSimulationDate.after(input.simulationInput.endDate)){\n\tnextSimulationDate = input.simulationInput.endDate;\n}\n\nvar simulationYearDuration = yearFrac(simulationDate, nextSimulationDate);\n\nreturn vInitPS * Math.pow(strategyRate, simulationYearDuration);",
      "displayed" : true,
      "resultType" : "Other",
      "identifier" : "vPSEndPeriodBeforeRisk",
      "ruleOrder" : 14
    }, {
      "type" : "com.vermeg.projection.api.input.ProjectionCalculationRule",
      "projectionInput$order" : 15,
      "expression" : "return vMainEndPeriodBeforeRisk+vPSEndPeriodBeforeRisk;",
      "displayed" : true,
      "resultType" : "Other",
      "identifier" : "vTotEndPeriodBeforeRisk",
      "ruleOrder" : 15
    }, {
      "type" : "com.vermeg.projection.api.input.ProjectionCalculationRule",
      "projectionInput$order" : 16,
      "expression" : "if(isEndDate) return 0.0;\nif(yearlyPremium == 0) return 0.0;\nimportPackage(java.util);\nimportPackage(com.vermeg.is.projection.code);\n\nvar result = 0.0;\n\nvar nextSimulationDate = new java.util.Date(simulationDate.getYear() + 1,0,1);\nif(nextSimulationDate.after(input.simulationInput.endDate)){\n\tnextSimulationDate = input.simulationInput.endDate;\n}\n//console.println(\"endDate: \"+ input.simulationInput.endDate);\nvar simulationYearDuration = yearFrac(simulationDate, nextSimulationDate);\n//console.println(\"simulationYearDuration: \"+ simulationYearDuration);\n\n//calculate SAR mid period\nvar riskInputs = input.packageInput.riskInputs\nfor (j = 0; j < riskInputs.size(); j++) {\n    var riskInput = riskInputs.get(j);\n    var sarMidPeriod = input.simulationInput.insuredAmounts.get(riskInput.riskId);\n\t//console.println(\"j: \"+ j);\n\t//console.println(\"riskInput.riskId: \"+ riskInput.riskId);\n\t//console.println(\"riskInput.sarType: \"+ riskInput.sarType);\n    if (riskInput.sarType != \"BASED_ON_TOTAL_CAPITAL\") {\n        sarMidPeriod = Math.max(0, sarMidPeriod - (vTotEndPeriodBeforeRisk + vTotBeginPeriodAfterP) / 2);\n    }\n\n  \t//console.println(\"sarMidPeriod: \"+ sarMidPeriod);\n    var riskPremium = 0.0;\n\n    if (riskInput.factorTable != null) {\n\t\t//console.println(\"riskInput.factorTable != null) \");\n        // calculate last day of month of birth date\n        var bdc = new GregorianCalendar();\n        \n        //get first insured person\n        var insuredPerson = riskInput.insuredPersons.get(0);\n\n        bdc.setTime(insuredPerson.birthDate);\n        bdc.set(Calendar.DATE, bdc.getActualMaximum(Calendar.DAY_OF_MONTH));\n        var birthDate = bdc.getTime();\n\t\t//console.println(\"birthDate: \"+ birthDate);\n        //calculate age of mid-period\n        var ageMidPeriod = yearFrac(birthDate, simulationDate) + simulationYearDuration / 2;\n\tvar intAgeMidPeriodInMonth = Math.floor(ageMidPeriod)*12 + Math.floor((ageMidPeriod - Math.floor(ageMidPeriod))*12)\n\n\t\t//console.println(\"ageMidPeriod: \"+ ageMidPeriod);\n\t\t//console.println(\"intAgeMidPeriod: \"+ intAgeMidPeriodInMonth);\n        //get qx\n        var qxColumnIndex = insuredPerson.smoker ? 1 : 0;\n\t\t//console.println(\"qxColumnIndex: \"+ qxColumnIndex);\n        //var qx = riskInput.factorTable.getValue(ageMidPeriod, qxColumnIndex);\n        var qx = riskInput.factorTable.getValue(intAgeMidPeriodInMonth, qxColumnIndex);\t\n\t\t//console.println(\"qx: \"+ qx);\n\n        // calculate risk premium \n        riskPremium = sarMidPeriod * qx * simulationYearDuration;\n\n    } else {\n\t\t//console.println(\"riskInput.factorTable == null) \");\n\t\t//console.println(\"riskInput.rate: \"+ riskInput.rate);\n\t\t//console.println(\"riskInput.feeAmount: \"+ riskInput.feeAmount);\n                //console.println(\"sarMidPeriod : \"+ sarMidPeriod);\n        riskPremium = sarMidPeriod * riskInput.rate + riskInput.feeAmount;\n    }\n\n    result += riskPremium;\n}\n\nvar strategyRate = input.simulationInput.getStrategyRate(ReserveType.MAIN) + 1;\n\t//console.println(\"strategyRate: \"+ strategyRate);\nreturn result * Math.pow(strategyRate, simulationYearDuration/2);",
      "displayed" : true,
      "resultType" : "TotalRiskPremium",
      "identifier" : "riskPremTotalEndPeriod",
      "ruleOrder" : 16
    }, {
      "type" : "com.vermeg.projection.api.input.ProjectionCalculationRule",
      "projectionInput$order" : 17,
      "expression" : "if(isEndDate) return 0.0;\nimportPackage(com.vermeg.salesflow.projection.code);\n\nvar result = 0.0;\nvar chargeType = \"APPLY_ON_TOTAL_RESERVE\";\n\nvar reserve = vTotBeginPeriodAfterP + vTotEndPeriodBeforeRisk / 2;\n\nvar strategyRate = input.simulationInput.getStrategyRate(ReserveType.MAIN) + 1;\n\nvar nextSimulationDate = new java.util.Date(simulationDate.getYear() + 1, 0, 1);\nif (nextSimulationDate.after(input.simulationInput.endDate)) {\n    nextSimulationDate = input.simulationInput.endDate;\n}\n\nvar simulationYearDuration = yearFrac(simulationDate, nextSimulationDate);\n\nvar chargeInputs = input.packageInput.chargeInputs;\n\n\nfor (j = 0; j < chargeInputs.size(); j++) {\n    var chargeInput = chargeInputs.get(j);\n\n    if (chargeInput.chargeType == chargeType) {\n        var a =( +(reserve * chargeInput.rate * simulationYearDuration).toFixed(2) + (chargeInput.feeAmount * simulationYearDuration)) * Math.pow(strategyRate, simulationYearDuration/2);\n        result += a;\n    }\n}\n\nreturn result;",
      "displayed" : true,
      "resultType" : "Other",
      "identifier" : "chargesTotVEndPeriod",
      "ruleOrder" : 17
    }, {
      "type" : "com.vermeg.projection.api.input.ProjectionCalculationRule",
      "projectionInput$order" : 18,
      "expression" : "if(isEndDate) return 0.0;\nif(yearlyPremium == 0) return 0.0;\nimportPackage(com.vermeg.salesflow.projection.code);\n\nvar result = 0.0;\nvar chargeType = \"APPLY_ON_MAIN_RESERVE\";\n\nvar reserve = vTotBeginPeriodAfterP + vTotEndPeriodBeforeRisk / 2;\n\nvar strategyRate = input.simulationInput.getStrategyRate(ReserveType.MAIN) + 1;\n\nvar nextSimulationDate = new java.util.Date(simulationDate.getYear() + 1, 0, 1);\nif (nextSimulationDate.after(input.simulationInput.endDate)) {\n    nextSimulationDate = input.simulationInput.endDate;\n}\n\nvar simulationYearDuration = yearFrac(simulationDate, nextSimulationDate);\n\nvar chargeInputs = input.packageInput.chargeInputs;\n\n\nfor (j = 0; j < chargeInputs.size(); j++) {\n    var chargeInput = chargeInputs.get(j);\n\n    if (chargeInput.chargeType == chargeType) {\n        var a = (+(reserve * chargeInput.rate *simulationYearDuration).toFixed(2) + (chargeInput.feeAmount * simulationYearDuration)) * Math.pow(strategyRate, simulationYearDuration/2);\n        result += a;\n    }\n}\n\nreturn result;",
      "displayed" : true,
      "resultType" : "Other",
      "identifier" : "chargesMainVEndPeriod",
      "ruleOrder" : 18
    }, {
      "type" : "com.vermeg.projection.api.input.ProjectionCalculationRule",
      "projectionInput$order" : 19,
      "expression" : "if(isEndDate) return 0.0;\nimportPackage(com.vermeg.salesflow.projection.code);\n\nvar result = 0.0;\nvar chargeType = \"APPLY_ON_PS_RESERVE\";\n\nvar reserve = vTotBeginPeriodAfterP + vTotEndPeriodBeforeRisk / 2;\n\nvar strategyRate = input.simulationInput.getStrategyRate(ReserveType.MAIN) + 1;\n\nvar nextSimulationDate = new java.util.Date(simulationDate.getYear() + 1, 0, 1);\nif (nextSimulationDate.after(input.simulationInput.endDate)) {\n    nextSimulationDate = input.simulationInput.endDate;\n}\n\nvar simulationYearDuration = yearFrac(simulationDate, nextSimulationDate);\n\nvar chargeInputs = input.packageInput.chargeInputs;\n\n\nfor (j = 0; j < chargeInputs.size(); j++) {\n    var chargeInput = chargeInputs.get(j);\n\n    if (chargeInput.chargeType == chargeType) {\n        var a = (+(reserve * chargeInput.rate * simulationYearDuration).toFixed(2) + (chargeInput.feeAmount * simulationYearDuration)) * Math.pow(strategyRate, simulationYearDuration/2);\n        result += a;\n    }\n}\n\nreturn result;",
      "displayed" : true,
      "resultType" : "Other",
      "identifier" : "chargesPSVEndPeriod",
      "ruleOrder" : 19
    }, {
      "type" : "com.vermeg.projection.api.input.ProjectionCalculationRule",
      "projectionInput$order" : 20,
      "expression" : "return chargesTotVEndPeriod+chargesMainVEndPeriod+chargesPSVEndPeriod;",
      "displayed" : true,
      "resultType" : "Other",
      "identifier" : "chargesTotOnVEndPeriod",
      "ruleOrder" : 20
    }, {
      "type" : "com.vermeg.projection.api.input.ProjectionCalculationRule",
      "projectionInput$order" : 21,
      "expression" : "var result =  vMainEndPeriodBeforeRisk - riskPremTotalEndPeriod -chargesMainVEndPeriod;\n\n\nreturn result;",
      "displayed" : true,
      "resultType" : "EndReserveMain",
      "identifier" : "vMainEndPeriod",
      "ruleOrder" : 21
    }, {
      "type" : "com.vermeg.projection.api.input.ProjectionCalculationRule",
      "projectionInput$order" : 22,
      "expression" : "return vPSEndPeriodBeforeRisk - chargesPSVEndPeriod;",
      "displayed" : true,
      "resultType" : "Other",
      "identifier" : "vPSEndPeriod",
      "ruleOrder" : 22
    }, {
      "type" : "com.vermeg.projection.api.input.ProjectionCalculationRule",
      "projectionInput$order" : 23,
      "expression" : "var result = vMainEndPeriod+vPSEndPeriod;\n\nreturn result;",
      "displayed" : true,
      "resultType" : "Other",
      "identifier" : "vTotEndPeriod",
      "ruleOrder" : 23
    }, {
      "type" : "com.vermeg.projection.api.input.ProjectionCalculationRule",
      "projectionInput$order" : 24,
      "expression" : "return 0.0;",
      "displayed" : true,
      "resultType" : "Other",
      "identifier" : "profitSharing",
      "ruleOrder" : 24
    }, {
      "type" : "com.vermeg.projection.api.input.ProjectionCalculationRule",
      "projectionInput$order" : 25,
      "expression" : "var result = profitSharing + vPSEndPeriod;\n\nreturn result;",
      "displayed" : true,
      "resultType" : "EndReservePs",
      "identifier" : "vPSEndPeriod",
      "ruleOrder" : 25
    }, {
      "type" : "com.vermeg.projection.api.input.ProjectionCalculationRule",
      "projectionInput$order" : 26,
      "expression" : "return  vPSEndPeriod + vMainEndPeriod;",
      "displayed" : true,
      "resultType" : "EndReservTotal",
      "identifier" : "reserveEndPeriodEnd",
      "ruleOrder" : 26
    }, {
      "type" : "com.vermeg.projection.api.input.ProjectionCalculationRule",
      "projectionInput$order" : 27,
      "expression" : "if(isEndDate) {\nvar reserveAtTerm = vPSEndPeriod + vMainEndPeriod;\nreturn reserveAtTerm ;\n}\nreturn 0;",
      "displayed" : true,
      "resultType" : "EndReserveTotBeforeTax",
      "identifier" : "reserveAtTermBeforeTax",
      "ruleOrder" : 27
    }, {
      "type" : "com.vermeg.projection.api.input.ProjectionCalculationRule",
      "projectionInput$order" : 28,
      "expression" : "importPackage(com.vermeg.salesflow.projection.output.model);\nimportPackage(com.vermeg.salesflow.projection.code);\nif (isEndDate) {\n    var result = new java.util.ArrayList();\n\n    var taxesOnMain = 0.0;\n\n    var taxInputs = input.packageInput.taxInputs\n    for (j = 0; j < taxInputs.size(); j++) {\n        var taxInput = taxInputs.get(j);\n        if (taxInput.taxType == \"APPLY_ON_TOTAL_RESERVE_AT_TERM\") {\n        \tvar taxOnMain = +(vMainEndPeriod * taxInput.rate).toFixed(2) + taxInput.taxAmount;\n            taxesOnMain += taxOnMain;\n            result.add(new TaxValue(TaxType.APPLY_ON_MAIN_RESERVE_AT_TERM, taxInput.getDescription()+\"_taxOnMain\", taxOnMain));\n\n            var taxOnPS = +(vPSEndPeriod * taxInput.rate).toFixed(2) + taxInput.taxAmount;\n            result.add(new TaxValue(TaxType.APPLY_ON_PS_RESERVE_AT_TERM, taxInput.getDescription()+\"_taxOnPS\", taxOnPS) );\n\n        }\n    }\n\n    for (j = 0; j < taxInputs.size(); j++) {\n        var taxInput = taxInputs.get(j);\n        if (taxInput.taxType == \"APPLY_ON_MAIN_RESERVE_AT_TERM\") {\n        \tvar taxOnMain = +((vMainEndPeriod - taxesOnMain) * taxInput.rate).toFixed(2) + taxInput.taxAmount\n            result.add(new TaxValue(TaxType.APPLY_ON_MAIN_RESERVE_AT_TERM, taxInput.getDescription()+\"_taxOnMain\", taxOnMain));\n        }\n    }\n\n    return result;\n}",
      "displayed" : true,
      "resultType" : "TaxAtTerm",
      "identifier" : "taxesAtTerm",
      "ruleOrder" : 28
    }, {
      "type" : "com.vermeg.projection.api.input.ProjectionCalculationRule",
      "projectionInput$order" : 29,
      "expression" : "if(isEndDate)  {\nvar reserveAtTerm = vPSEndPeriod + vMainEndPeriod;\n\n    var taxInputs = input.packageInput.taxInputs\n    var taxes = 0.0;\n\n    for(var j=0; j<taxesAtTerm.size(); j++){\n        var taxAtTerm= taxesAtTerm.get(j);\n        taxes += +taxAtTerm.getAmount();\n    }\n\n    var result = reserveAtTerm - taxes;\n    console.println(\"AXA-EIP_1310_FISCAL_OPT----------------------------- reserveAtTerm after Tax: \"+ result);\n    return result;\n}",
      "displayed" : true,
      "resultType" : "EndReserveTotAfterTax",
      "identifier" : "reserveAtTermAfterTax",
      "ruleOrder" : 29
    } ],
    "packageInput" : {
      "type" : "com.vermeg.projection.api.input.PackageInput",
      "productId" : "AXA-EIP_1310",
      "taxInput" : [ {
        "type" : "com.vermeg.projection.api.input.TaxInput",
        "taxAmount" : 0.0,
        "rate" : 0.0,
        "description" : "Term Tax",
        "taxType" : "applyOnMainReserveAtTerm"
      }, {
        "type" : "com.vermeg.projection.api.input.TaxInput",
        "taxAmount" : 0.0,
        "rate" : 0.044,
        "description" : "Tax on Yearly Premium",
        "taxType" : "applyOnYearlyPremium"
      }, {
        "type" : "com.vermeg.projection.api.input.TaxInput",
        "taxAmount" : 0.0,
        "rate" : 0.0,
        "description" : "Inami Tax",
        "taxType" : "applyOnTotalReserveAtTerm"
      }, {
        "type" : "com.vermeg.projection.api.input.TaxInput",
        "taxAmount" : 0.0,
        "rate" : 0.0,
        "description" : "Social Tax",
        "taxType" : "applyOnTotalReserveAtTerm"
      }, {
        "type" : "com.vermeg.projection.api.input.TaxInput",
        "taxAmount" : 0.0,
        "rate" : 0.044,
        "description" : "Tax on Unique Premium",
        "taxType" : "applyOnUniquePremium"
      } ],
      "riskInput" : [ {
        "type" : "com.vermeg.projection.api.input.RiskInput",
        "rate" : 0.0,
        "riskId" : "RSK_DEATH_INV_COMPLEMENT_AXA",
        "description" : "Death risk premium",
        "feeAmount" : 0.0,
        "factorTableName" : "Qx_NotSmoker_Smoker_Charged",
        "sARType" : "basedOnTotalCapital",
        "personParam" : [ {
          "type" : "com.vermeg.projection.api.input.PersonParam",
          "smokerParam" : false,
          "birthDateParam" : "01/01/1980T00:00:00.000+0100"
        } ],
        "factorTableElement" : [ {
          "type" : "com.vermeg.projection.api.input.FactorTableElement",
          "factorValue" : 0.00183163907217576,
          "yParameter" : "0.0",
          "xParameter" : "246.0"
        }, {
          "type" : "com.vermeg.projection.api.input.FactorTableElement",
          "factorValue" : 0.995017425654647,
          "yParameter" : "0.0",
          "xParameter" : "1429.0"
        }, {
          "type" : "com.vermeg.projection.api.input.FactorTableElement",
          "factorValue" : 0.089103204601915,
          "yParameter" : "1.0",
          "xParameter" : "948.0"
        }, {
          "type" : "com.vermeg.projection.api.input.FactorTableElement",
          "factorValue" : 0.00200789461234552,
          "yParameter" : "1.0",
          "xParameter" : "33.0"
        }, {
          "type" : "com.vermeg.projection.api.input.FactorTableElement",
          "factorValue" : 0.00200789461234552,
          "yParameter" : "1.0",
          "xParameter" : "26.0"
        }, {
          "type" : "com.vermeg.projection.api.input.FactorTableElement",
          "factorValue" : 0.00185236965326507,
          "yParameter" : "0.0",
          "xParameter" : "275.0"
        }, {
          "type" : "com.vermeg.projection.api.input.FactorTableElement",
          "factorValue" : 0.896653473039226,
          "yParameter" : "1.0",
          "xParameter" : "1291.0"
        }, {
          "type" : "com.vermeg.projection.api.input.FactorTableElement",
          "factorValue" : 0.00241364954993051,
          "yParameter" : "1.0",
          "xParameter" : "379.0"
        }, {
          "type" : "com.vermeg.projection.api.input.FactorTableElement",
          "factorValue" : 0.00186466769832949,
          "yParameter" : "0.0",
          "xParameter" : "277.0"
        }, {
          "type" : "com.vermeg.projection.api.input.FactorTableElement",
          "factorValue" : 0.00205241749666651,
          "yParameter" : "1.0",
          "xParameter" : "169.0"
        }, {
          "type" : "com.vermeg.projection.api.input.FactorTableElement",
          "factorValue" : 0.896653473039226,
          "yParameter" : "1.0",
          "xParameter" : "1292.0"
        }, {
          "type" : "com.vermeg.projection.api.input.FactorTableElement",
          "factorValue" : 0.942420204032279,
          "yParameter" : "0.0",
          "xParameter" : "1357.0"
        }, {
          "type" : "com.vermeg.projection.api.input.FactorTableElement",
          "factorValue" : 0.00186466769832949,
          "yParameter" : "0.0",
          "xParameter" : "279.0"
        }, {
          "type" : "com.vermeg.projection.api.input.FactorTableElement",
          "factorValue" : 0.00205241749666651,
          "yParameter" : "1.0",
          "xParameter" : "172.0"
        }, {
          "type" : "com.vermeg.projection.api.input.FactorTableElement",
          "factorValue" : 0.722986733766066,
          "yParameter" : "1.0",
          "xParameter" : "1228.0"
        }, {
          "type" : "com.vermeg.projection.api.input.FactorTableElement",
          "factorValue" : 0.923423501737393,
          "yParameter" : "0.0",
          "xParameter" : "1351.0"
        }, {
          "type" : "com.vermeg.projection.api.input.FactorTableElement",
          "factorValue" : 0.00182293167247538,
          "yParameter" : "0.0",
          "xParameter" : "234.0"
        }, {
          "type" : "com.vermeg.projection.api.input.FactorTableElement",
          "factorValue" : 0.00301922592099613,
          "yParameter" : "0.0",
          "xParameter" : "536.0"
        }, {
          "type" : "com.vermeg.projection.api.input.FactorTableElement",
          "factorValue" : 0.0017694856478534,
          "yParameter" : "0.0",
          "xParameter" : "85.0"
        }, {
          "type" : "com.vermeg.projection.api.input.FactorTableElement",
          "factorValue" : 0.00264924733908356,
          "yParameter" : "0.0",
          "xParameter" : "495.0"
        }, {
          "type" : "com.vermeg.projection.api.input.FactorTableElement",
          "factorValue" : 0.00176753543983321,
          "yParameter" : "0.0",
          "xParameter" : "83.0"
        }, {
          "type" : "com.vermeg.projection.api.input.FactorTableElement",
          "factorValue" : 0.00329432741721081,
          "yParameter" : "0.0",
          "xParameter" : "563.0"
        }, {
          "type" : "com.vermeg.projection.api.input.FactorTableElement",
          "factorValue" : 0.00211157689755093,
          "yParameter" : "1.0",
          "xParameter" : "245.0"
        }, {
          "type" : "com.vermeg.projection.api.input.FactorTableElement",
          "factorValue" : 0.776504006043087,
          "yParameter" : "0.0",
          "xParameter" : "1286.0"
        }, {
          "type" : "com.vermeg.projection.api.input.FactorTableElement",
